<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>NieDżejkob&#x27;s ramblings</title>
        <link>https://niedzejkob.p4.team/</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://niedzejkob.p4.team/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Wed, 07 Jul 2021 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Compiling Rust is NP-hard</title>
            <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://niedzejkob.p4.team/rust-np/</link>
            <guid>https://niedzejkob.p4.team/rust-np/</guid>
            <description>&lt;section&gt;
&lt;p&gt;...though it&#x27;s not the flagship borrow checking that&#x27;s at fault.  What I
noticed, and would like to share with you today, is that the exhaustiveness
checking performed by the Rust compiler on &lt;code&gt;match&lt;&#x2F;code&gt; patterns is a superset of the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Boolean_satisfiability_problem&quot;&gt;SAT&lt;&#x2F;a&gt; problem. </description>
        </item>
        <item>
            <title>Branches: No assembly required</title>
            <pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate>
            <link>https://niedzejkob.p4.team/bootstrap/asmless/</link>
            <guid>https://niedzejkob.p4.team/bootstrap/asmless/</guid>
            <description>&lt;section&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;niedzejkob.p4.team&#x2F;bootstrap&#x2F;branches&#x2F;&quot;&gt;Last time,&lt;&#x2F;a&gt; we started from the barebones &lt;a href=&quot;https:&#x2F;&#x2F;niedzejkob.p4.team&#x2F;bootstrap&#x2F;miniforth&#x2F;&quot;&gt;Miniforth kernel&lt;&#x2F;a&gt;, and
implemented branches by writing additional primitive words in assembly. For
pragmatic reasons, that is the road I will be pursuing further, but I noticed
that it is also possible to implement branches in pure Forth. I believe that
this approach is quite interesting, so let&#x27;s take a detour and get a closer
look. </description>
        </item>
        <item>
            <title>No branches? No problem — a Forth assembler</title>
            <pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate>
            <link>https://niedzejkob.p4.team/bootstrap/branches/</link>
            <guid>https://niedzejkob.p4.team/bootstrap/branches/</guid>
            <description>&lt;section&gt;
&lt;p&gt;The set of words available after Miniforth boots is quite bare-bones. One
reader even &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Forth&#x2F;comments&#x2F;nxgg20&#x2F;fitting_a_forth_in_512_bytes&#x2F;h1eq4ok&quot;&gt;claimed&lt;&#x2F;a&gt; that, since there&#x27;s no branches, it is not
Turing-complete, and therefore not worthy of being called a Forth! Today is the
day we prove them wrong. </description>
        </item>
        <item>
            <title>Fitting a FORTH in 512 bytes</title>
            <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
            <link>https://niedzejkob.p4.team/bootstrap/miniforth/</link>
            <guid>https://niedzejkob.p4.team/bootstrap/miniforth/</guid>
            <description>&lt;section&gt;
&lt;p&gt;Software is full of circular dependencies if you look deep enough. Compilers
written in the language they compile are the most obvious example, but not the
only one. To compile a kernel, you need a running kernel. Linkers, build
systems, shells.  Even text editors, if you want to write the code instead of
just downloading it. How do you break this cycle? Since the &lt;a href=&quot;http:&#x2F;&#x2F;bootstrappable.org&#x2F;&quot;&gt;bootstrapping
problem&lt;&#x2F;a&gt; has first come to my attention, I&#x27;ve been drawn to
this unique area of software engineering.  Not out of fear that someone would
try to implement a &lt;a href=&quot;http:&#x2F;&#x2F;users.ece.cmu.edu&#x2F;%7Eganger&#x2F;712.fall02&#x2F;papers&#x2F;p761-thompson.pdf&quot;&gt;trusting trust&lt;&#x2F;a&gt; attack, but simply as an interesting
challenge.  </description>
        </item>
    </channel>
</rss>
